name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Lint and validate code
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

  # Type checking
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm exec prisma generate

      - name: Run TypeScript compiler
        run: pnpm tsc --noEmit

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate || true

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm exec prisma generate

      - name: Create dummy .env file
        run: |
          cat > .env << EOF
          OPENAI_API_KEY=sk-dummy-key-for-build
          DATABASE_URL="file:./data/prompts.db"
          NEXT_PUBLIC_APP_URL=http://localhost:3040
          AUDIO_STORAGE_PATH=./public/audio
          AUTH_USERNAME=admin
          AUTH_PASSWORD=\$2b\$10\$dummyhashforcibuilds
          SESSION_SECRET=$(openssl rand -base64 32)
          CLEANUP_SECRET_KEY=$(openssl rand -base64 32)
          EOF

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/
          retention-days: 1

  # Environment validation
  env-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create valid .env file
        run: |
          cat > .env << EOF
          OPENAI_API_KEY=sk-test1234567890abcdefghijklmnopqrstuvwxyz1234567890
          DATABASE_URL="file:./data/prompts.db"
          NEXT_PUBLIC_APP_URL=http://localhost:3040
          AUDIO_STORAGE_PATH=./public/audio
          AUTH_USERNAME=admin
          AUTH_PASSWORD=\$2b\$10\$validbcrypthashforvalidationtest
          SESSION_SECRET=$(openssl rand -base64 32)
          CLEANUP_SECRET_KEY=$(openssl rand -base64 32)
          EOF

      - name: Validate environment
        run: pnpm run validate-env

  # Docker build verification
  docker:
    name: Docker Build Verification
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: phone-prompt-generator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            OPENAI_API_KEY=sk-dummy-key-for-build
            DATABASE_URL=file:./data/prompts.db
            NEXT_PUBLIC_APP_URL=http://localhost:3040

  # Overall status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, security, build, env-validation, docker]
    if: always()
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.env-validation.result }}" != "success" ] || \
             [ "${{ needs.docker.result }}" != "success" ]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline passed successfully"
